
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author win 10
 */
public class deposit extends javax.swing.JFrame {
Connection conn=null;

    /**
     * Creates new form deposit
     */
    public deposit() {
        initComponents();
       // setSize(800,500);
        //setVisible(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tf1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        c1 = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        dl2 = new javax.swing.JComboBox();
        t2 = new javax.swing.JTextField();
        t1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        d1 = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        dl1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jb3 = new javax.swing.JButton();
        lb1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Fee Deposition");

        tf1.setText("Name");

        jLabel3.setText("AMOUNT");

        jLabel4.setText("Room no.");

        c1.setText("6500");

        jLabel5.setText("Month");

        dl2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "january", "febuary", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december" }));
        dl2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dl2ActionPerformed(evt);
            }
        });

        t1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                t1KeyReleased(evt);
            }
        });

        jLabel6.setText("DATE");

        jLabel7.setText("Mode of Payment");

        dl1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cash", "PhonePe", "GooglePay", "Paytm", "RTGS/NEFT" }));
        dl1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dl1ActionPerformed(evt);
            }
        });

        jButton1.setText("DEPOSIT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("SEND MESSAGE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jb3.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jb3.setText("Reset");
        jb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb3ActionPerformed(evt);
            }
        });

        lb1.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(tf1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(93, 93, 93)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(c1)
                            .addComponent(d1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dl1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dl2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lb1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(t2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                                .addComponent(t1, javax.swing.GroupLayout.Alignment.LEADING))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(215, 215, 215)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(129, 129, 129)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88)
                        .addComponent(jb3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(156, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(lb1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(c1))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dl2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(d1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dl1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jb3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(125, 125, 125))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dl2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dl2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dl2ActionPerformed

    private void dl1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dl1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dl1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
  try {
            // TODO add your handling code here:
            String amount="null" ;
            Class.forName("com.mysql.jdbc.Driver");        
            //String url="jdbc:mysql://localhost:3306/project?autoReconnect=true&useSSL=false";
            String url="jdbc:mysql://localhost:3306/fee";
            String uid="root";
            String pwd="root";
            Connection con=DriverManager.getConnection(url, uid, pwd);
            Statement stmt=con.createStatement();
       
        String name=t1.getText();
        String room=t2.getText();
        
                
        SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy", Locale.getDefault());
            String d = sdf.format(d1.getDate());
        String mop=dl1.getSelectedItem().toString();
         String month=dl2.getSelectedItem().toString();
       
        if(c1.isSelected()){
             amount="paid";
           
        }
        else
            amount="not paid";
       
         String Sql= "select * from entry where name='"+name+"' and rno='"+room+"' ";
         ResultSet rs= stmt.executeQuery(Sql);
         
         if(rs.next()){
       
       
            if(month.equals("january"))
               {
                   String q="select amount from january where name='"+name+"' and room='"+room+"' ";
                   
                    ResultSet r=stmt.executeQuery(q);
        
                        if(r.next()){
                   JOptionPane.showMessageDialog(null, "ALREADY DEPOSITED");
                                }
                        else{
      
                         int ni=r.getRow();
                          System.out.println(ni);
   
               
                  String sql="insert into january(name,room,dd,mop,amount,month) values(?,?,?,?,?,?)";
                  PreparedStatement ps=con.prepareStatement(sql);
                  ps.setString(1,name);
                 //Convert string to date
                       SimpleDateFormat f1=new SimpleDateFormat("dd-mm-yyyy");
                        java.util.Date date= f1.parse(d);
                        java.sql.Date sd=new java.sql.Date(date.getTime());
                         ps.setDate(3, sd);
                   
                        ps.setString(2,room);
                        ps.setString(4,mop);
           
                        ps.setString(5, amount);
                        ps.setString(6,month);
                        int n=ps.executeUpdate();
                       JOptionPane.showMessageDialog(null, "SUCCESFULLY DEPOSITED");
                        
                       //Message second = new Message();
                        //second.setVisible(true);
                      }
                       
                 }
            
            else if(month.equals("febuary"))
                    {

                       String q="select amount from febuary where name='"+name+"' and room='"+room+"' ";
                       ResultSet r=stmt.executeQuery(q);
        
                       if(r.next()){
                                  JOptionPane.showMessageDialog(null, "ALREADY DEPOSITED");
                                   }
                       else{

                  String sql="insert into febuary(name,room,dd,mop,amount,month) values(?,?,?,?,?,?)";
                  PreparedStatement ps=con.prepareStatement(sql);
                  ps.setString(1,name);
                 //Convert string to date
                       SimpleDateFormat f1=new SimpleDateFormat("dd-mm-yyyy");
                        java.util.Date date= f1.parse(d);
                        java.sql.Date sd=new java.sql.Date(date.getTime());
                         ps.setDate(3, sd);
                   
                        ps.setString(2,room);
                        ps.setString(4,mop);
           
                        ps.setString(5, amount);
                       ps.setString(6,month);
                        int n=ps.executeUpdate();
                       Message second = new Message();
                        second.setVisible(true);
                        }     
                    }
            
        else if(month.equals("march"))
                    {
        
                     String q="select amount from march where name='"+name+"' and room='"+room+"' ";
                   
                    ResultSet r=stmt.executeQuery(q);
        
                        if(r.next()){
                   JOptionPane.showMessageDialog(null, "ALREADY DEPOSITED");
                                }
                        else{
                  String sql="insert into march(name,room,dd,mop,amount,month) values(?,?,?,?,?,?)";
                  PreparedStatement ps=con.prepareStatement(sql);
                  ps.setString(1,name);
                 //Convert string to date
                       SimpleDateFormat f1=new SimpleDateFormat("dd-mm-yyyy");
                        java.util.Date date= f1.parse(d);
                        java.sql.Date sd=new java.sql.Date(date.getTime());
                         ps.setDate(3, sd);
                   
                        ps.setString(2,room);
                        ps.setString(4,mop);
           
                        ps.setString(5, amount);
                        ps.setString(6,month);
                        int n=ps.executeUpdate();
                       Message second = new Message();
                        second.setVisible(true);
                        
                        }       
                        
                    }
            else if(month.equals("april"))
                    {
                        String q="select amount from april where name='"+name+"' and room='"+room+"' ";
                   
                    ResultSet r=stmt.executeQuery(q);
        
                        if(r.next()){
                   JOptionPane.showMessageDialog(null, "ALREADY DEPOSITED");
                                }
                        else{
                  String sql="insert into april(name,room,dd,mop,amount,month) values(?,?,?,?,?,?)";
                  PreparedStatement ps=con.prepareStatement(sql);
                  ps.setString(1,name);
                 //Convert string to date
                       SimpleDateFormat f1=new SimpleDateFormat("dd-mm-yyyy");
                        java.util.Date date= f1.parse(d);
                        java.sql.Date sd=new java.sql.Date(date.getTime());
                         ps.setDate(3, sd);
                   
                        ps.setString(2,room);
                        ps.setString(4,mop);
           
                        ps.setString(5, amount);
                        ps.setString(6,month);
                        int n=ps.executeUpdate();
                       Message second = new Message();
                        second.setVisible(true);
                        
                        }
                        
                    }
            else if(month.equals("may"))
                    {
                        String q="select amount from may where name='"+name+"' and room='"+room+"' ";
                   
                    ResultSet r=stmt.executeQuery(q);
        
                        if(r.next()){
                   JOptionPane.showMessageDialog(null, "ALREADY DEPOSITED");
                                }
                        else{
                  String sql="insert into may(name,room,dd,mop,amount,month) values(?,?,?,?,?,?)";
                  PreparedStatement ps=con.prepareStatement(sql);
                  ps.setString(1,name);
                 //Convert string to date
                       SimpleDateFormat f1=new SimpleDateFormat("dd-mm-yyyy");
                        java.util.Date date= f1.parse(d);
                        java.sql.Date sd=new java.sql.Date(date.getTime());
                         ps.setDate(3, sd);
                   
                        ps.setString(2,room);
                        ps.setString(4,mop);
           
                        ps.setString(5, amount);
                        ps.setString(6,month);
                        int n=ps.executeUpdate();
                       Message second = new Message();
                        second.setVisible(true);
                        
                        }
                        
                    }
            else if(month.equals("june"))
                    {
        
                        String q="select amount from june where name='"+name+"' and room='"+room+"' ";
                   
                    ResultSet r=stmt.executeQuery(q);
        
                        if(r.next()){
                   JOptionPane.showMessageDialog(null, "ALREADY DEPOSITED");
                                }
                        else{
                  String sql="insert into june(name,room,dd,mop,amount,month) values(?,?,?,?,?,?)";
                  PreparedStatement ps=con.prepareStatement(sql);
                  ps.setString(1,name);
                 //Convert string to date
                       SimpleDateFormat f1=new SimpleDateFormat("dd-mm-yyyy");
                        java.util.Date date= f1.parse(d);
                        java.sql.Date sd=new java.sql.Date(date.getTime());
                         ps.setDate(3, sd);
                   
                        ps.setString(2,room);
                        ps.setString(4,mop);
           
                        ps.setString(5, amount);
                        ps.setString(6,month);
                        int n=ps.executeUpdate();
                       Message second = new Message();
                        second.setVisible(true);
                        
                        }
                        
                    }
            else if(month.equals("july"))
                    {
                        String q="select amount from july where name='"+name+"' and room='"+room+"' ";
                   
                    ResultSet r=stmt.executeQuery(q);
        
                        if(r.next()){
                   JOptionPane.showMessageDialog(null, "ALREADY DEPOSITED");
                                }
                        else{
                  String sql="insert into july(name,room,dd,mop,amount,month) values(?,?,?,?,?,?)";
                  PreparedStatement ps=con.prepareStatement(sql);
                  ps.setString(1,name);
                 //Convert string to date
                       SimpleDateFormat f1=new SimpleDateFormat("dd-mm-yyyy");
                        java.util.Date date= f1.parse(d);
                        java.sql.Date sd=new java.sql.Date(date.getTime());
                         ps.setDate(3, sd);
                   
                        ps.setString(2,room);
                        ps.setString(4,mop);
           
                        ps.setString(5, amount);
                        ps.setString(6,month);
                        int n=ps.executeUpdate();
                       Message second = new Message();
                        second.setVisible(true);
                        
                        }
                        
                    }
            else if(month.equals("august"))
                    {
        
                        String q="select amount from august where name='"+name+"' and room='"+room+"' ";
                   
                    ResultSet r=stmt.executeQuery(q);
        
                        if(r.next()){
                   JOptionPane.showMessageDialog(null, "ALREADY DEPOSITED");
                                }
                        else{
                  String sql="insert into august(name,room,dd,mop,amount,month) values(?,?,?,?,?,?)";
                  PreparedStatement ps=con.prepareStatement(sql);
                  ps.setString(1,name);
                 //Convert string to date
                       SimpleDateFormat f1=new SimpleDateFormat("dd-mm-yyyy");
                        java.util.Date date= f1.parse(d);
                        java.sql.Date sd=new java.sql.Date(date.getTime());
                         ps.setDate(3, sd);
                   
                        ps.setString(2,room);
                        ps.setString(4,mop);
           
                        ps.setString(5, amount);
                        ps.setString(6,month);
                        int n=ps.executeUpdate();
                       Message second = new Message();
                        second.setVisible(true);
                        
                        }
                        
                    }
            else if(month.equals("september"))
                    {
        
                        String q="select amount from september where name='"+name+"' and room='"+room+"' ";
                   
                    ResultSet r=stmt.executeQuery(q);
        
                        if(r.next()){
                   JOptionPane.showMessageDialog(null, "ALREADY DEPOSITED");
                                }
                        else{

                        
                  String sql="insert into september(name,room,dd,mop,amount,month) values(?,?,?,?,?,?)";
                  PreparedStatement ps=con.prepareStatement(sql);
                  ps.setString(1,name);
                 //Convert string to date
                       SimpleDateFormat f1=new SimpleDateFormat("dd-mm-yyyy");
                        java.util.Date date= f1.parse(d);
                        java.sql.Date sd=new java.sql.Date(date.getTime());
                         ps.setDate(3, sd);
                   
                        ps.setString(2,room);
                        ps.setString(4,mop);
           
                        ps.setString(5, amount);
                        ps.setString(6,month);
                        int n=ps.executeUpdate();
                       Message second = new Message();
                        second.setVisible(true);
                        
                        }
                        
                    }
            else if(month.equals("october"))
                    {
        
                        String q="select amount from october where name='"+name+"' and room='"+room+"' ";
                   
                    ResultSet r=stmt.executeQuery(q);
        
                        if(r.next()){
                   JOptionPane.showMessageDialog(null, "ALREADY DEPOSITED");
                                }
                        else{
                  String sql="insert into october(name,room,dd,mop,amount,month) values(?,?,?,?,?,?)";
                  PreparedStatement ps=con.prepareStatement(sql);
                  ps.setString(1,name);
                 //Convert string to date
                       SimpleDateFormat f1=new SimpleDateFormat("dd-mm-yyyy");
                        java.util.Date date= f1.parse(d);
                        java.sql.Date sd=new java.sql.Date(date.getTime());
                         ps.setDate(3, sd);
                   
                        ps.setString(2,room);
                        ps.setString(4,mop);
           
                        ps.setString(5, amount);
                        ps.setString(6,month);
                        int n=ps.executeUpdate();
                       Message second = new Message();
                        second.setVisible(true);
                        
                        }
                        
                    }
            else if(month.equals("november"))
                    {
                        String q="select amount from november where name='"+name+"' and room='"+room+"' ";
                   
                    ResultSet r=stmt.executeQuery(q);
        
                        if(r.next()){
                   JOptionPane.showMessageDialog(null, "ALREADY DEPOSITED");
                                }
                        else{
                  String sql="insert into november(name,room,dd,mop,amount,month) values(?,?,?,?,?,?)";
                  PreparedStatement ps=con.prepareStatement(sql);
                  ps.setString(1,name);
                 //Convert string to date
                       SimpleDateFormat f1=new SimpleDateFormat("dd-mm-yyyy");
                        java.util.Date date= f1.parse(d);
                        java.sql.Date sd=new java.sql.Date(date.getTime());
                         ps.setDate(3, sd);
                   
                        ps.setString(2,room);
                        ps.setString(4,mop);
           
                        ps.setString(5, amount);
                        ps.setString(6,month);
                        int n=ps.executeUpdate();
                       Message second = new Message();
                        second.setVisible(true);
                        
                        
                        }
                    }
            else if(month.equals("december"))
                    {
                        String q="select amount from december where name='"+name+"' and room='"+room+"' ";
                   
                    ResultSet r=stmt.executeQuery(q);
        
                        if(r.next()){
                   JOptionPane.showMessageDialog(null, "ALREADY DEPOSITED");
                                }
                        else{
        
                  String sql="insert into december(name,room,dd,mop,amount,month) values(?,?,?,?,?,?)";
                  PreparedStatement ps=con.prepareStatement(sql);
                  ps.setString(1,name);
                 //Convert string to date
                       SimpleDateFormat f1=new SimpleDateFormat("dd-mm-yyyy");
                        java.util.Date date= f1.parse(d);
                        java.sql.Date sd=new java.sql.Date(date.getTime());
                         ps.setDate(3, sd);
                   
                        ps.setString(2,room);
                        ps.setString(4,mop);
           
                        ps.setString(5, amount);
                        ps.setString(6,month);
                        int n=ps.executeUpdate();
                     //  Message second = new Message();
                       // second.setVisible(true);
                        }
                    }
         }
          
         else  {
            JOptionPane.showMessageDialog(null, "RECORD don't exist");
           }
        
        }
       
       catch(Exception e){
                e.printStackTrace();
        }
        
        

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
String number=null;
        try{
            
            
            Class.forName("com.mysql.jdbc.Driver");        
            //String ur`l="jdbc:mysql://localhost:3306/project?autoReconnect=true&useSSL=false";
            String ur="jdbc:mysql://localhost:3306/fee";
            String uid="root";
            String pwd="root";
             conn=DriverManager.getConnection(ur, uid, pwd);
            
            
            String name=t1.getText();
            String s="Select mob from entry where name=?";
            PreparedStatement p=conn.prepareStatement(s);
            
            p.setString(1,name);
            ResultSet rs=p.executeQuery();
                       int n=rs.getRow();
            System.out.println(n);
            
            if(rs.next()){
               number=rs.getString(1);
            }
            String message = "heyy";
          // String number = phn;
            String apiKey="ZwJ8Rp1vxPcYeb3MSn0QCWNXAhGlEjFa5dyItO46mUrLKskTH9PQuKrctYfmvVOSFqGBjNzTp3h4DUy7";
            String senderId="FSTSMS";
            String language="English";
            String route="p";

            message = URLEncoder.encode(message, "UTF-8");
            String myurl="https://www.fast2sms.com/dev/bulk?authorization="+apiKey+"&sender_id="+senderId+"&message="+message+"&language="+language+"&route="+route+"&numbers="+number;

            URL url=new URL(myurl);
            HttpURLConnection con=(HttpURLConnection)url.openConnection();
            con.setRequestMethod("GET");

            con.setRequestProperty("User-Agent", "Chrome/79.0.3945.130");
            con.setRequestProperty("cache-control","no-cache");
            int code=con.getResponseCode();

            StringBuffer response=new StringBuffer();
            BufferedReader br=new BufferedReader(new InputStreamReader(con.getInputStream()));
            while(true)
            {
                String line=br.readLine();
                if(line==null)
                {
                    break;
                }
                response.append(line);
            }
            JOptionPane.showMessageDialog(null, "MESSAGE SENT TO  "+ number);
            

        }catch(Exception e){
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb3ActionPerformed
        t1.setText(" ");

        t2.setText(" ");
        c1.setSelected(false);
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jb3ActionPerformed

    private void t1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t1KeyReleased
  String s=null;
  String name=t1.getText();
        try {
        Connection con=Data.connect();
        Statement stmt=con.createStatement();
        String q="Select rno from entry where name='"+name+"' ";
        ResultSet rs=stmt.executeQuery(q);
        if(rs.next()){
            s=rs.getString(1);
        
        
        lb1.setText(" Room no. : "+s);
        }
        else{
            lb1.setText(" ");
        }
        
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    }//GEN-LAST:event_t1KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(deposit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(deposit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(deposit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(deposit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new deposit().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox c1;
    private com.toedter.calendar.JDateChooser d1;
    private javax.swing.JComboBox dl1;
    private javax.swing.JComboBox dl2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JButton jb3;
    private javax.swing.JLabel lb1;
    private javax.swing.JTextField t1;
    private javax.swing.JTextField t2;
    private javax.swing.JLabel tf1;
    // End of variables declaration//GEN-END:variables
}
